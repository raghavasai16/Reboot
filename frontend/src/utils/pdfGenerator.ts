import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export interface ReportData {
  title: string;
  generatedBy: string;
  generatedAt: Date;
  data: any;
  type: 'onboarding-summary' | 'department-analytics' | 'time-analysis' | 'document-compliance' | 'bgv-status' | 'gamification-metrics';
}

export const generatePDFReport = async (reportData: ReportData): Promise<void> => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Header
  pdf.setFontSize(20);
  pdf.setTextColor(37, 99, 235); // Blue color
  pdf.text(reportData.title, 20, 30);
  
  pdf.setFontSize(10);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Generated by: ${reportData.generatedBy}`, 20, 40);
  pdf.text(`Generated on: ${reportData.generatedAt.toLocaleString()}`, 20, 45);
  
  // Line separator
  pdf.setDrawColor(200, 200, 200);
  pdf.line(20, 50, pageWidth - 20, 50);
  
  let yPosition = 60;
  
  switch (reportData.type) {
    case 'onboarding-summary':
      yPosition = generateOnboardingSummary(pdf, reportData.data, yPosition);
      break;
    case 'department-analytics':
      yPosition = generateDepartmentAnalytics(pdf, reportData.data, yPosition);
      break;
    case 'time-analysis':
      yPosition = generateTimeAnalysis(pdf, reportData.data, yPosition);
      break;
    case 'document-compliance':
      yPosition = generateDocumentCompliance(pdf, reportData.data, yPosition);
      break;
    case 'bgv-status':
      yPosition = generateBGVStatus(pdf, reportData.data, yPosition);
      break;
    case 'gamification-metrics':
      yPosition = generateGamificationMetrics(pdf, reportData.data, yPosition);
      break;
  }
  
  // Footer
  pdf.setFontSize(8);
  pdf.setTextColor(150, 150, 150);
  pdf.text('OnboardAI - HR Management Platform', 20, pageHeight - 20);
  pdf.text(`Page 1 of 1`, pageWidth - 40, pageHeight - 20);
  
  // Save the PDF
  pdf.save(`${reportData.title.replace(/\s+/g, '_').toLowerCase()}_${Date.now()}.pdf`);
};

const generateOnboardingSummary = (pdf: jsPDF, data: any, yPosition: number): number => {
  pdf.setFontSize(14);
  pdf.setTextColor(0, 0, 0);
  pdf.text('Onboarding Summary Report', 20, yPosition);
  yPosition += 15;
  
  pdf.setFontSize(10);
  pdf.text(`Total Candidates: ${data.totalCandidates}`, 20, yPosition);
  yPosition += 8;
  pdf.text(`Completed: ${data.completed} (${Math.round((data.completed / data.totalCandidates) * 100)}%)`, 20, yPosition);
  yPosition += 8;
  pdf.text(`In Progress: ${data.inProgress}`, 20, yPosition);
  yPosition += 8;
  pdf.text(`Pending: ${data.pending}`, 20, yPosition);
  yPosition += 15;
  
  pdf.setFontSize(12);
  pdf.text('Recent Activities:', 20, yPosition);
  yPosition += 10;
  
  pdf.setFontSize(9);
  data.recentActivities.forEach((activity: any, index: number) => {
    if (yPosition > 250) {
      pdf.addPage();
      yPosition = 30;
    }
    pdf.text(`${index + 1}. ${activity.candidate} - ${activity.action} (${activity.time})`, 25, yPosition);
    yPosition += 6;
  });
  
  return yPosition;
};

const generateDepartmentAnalytics = (pdf: jsPDF, data: any, yPosition: number): number => {
  pdf.setFontSize(14);
  pdf.setTextColor(0, 0, 0);
  pdf.text('Department Analytics Report', 20, yPosition);
  yPosition += 15;
  
  pdf.setFontSize(10);
  data.departments.forEach((dept: any) => {
    pdf.text(`${dept.name}: ${dept.completed}/${dept.total} (${dept.percentage}%)`, 20, yPosition);
    yPosition += 8;
  });
  
  return yPosition;
};

const generateTimeAnalysis = (pdf: jsPDF, data: any, yPosition: number): number => {
  pdf.setFontSize(14);
  pdf.setTextColor(0, 0, 0);
  pdf.text('Time Analysis Report', 20, yPosition);
  yPosition += 15;
  
  pdf.setFontSize(10);
  data.steps.forEach((step: any) => {
    pdf.text(`${step.name}: Average ${step.averageTime} days`, 20, yPosition);
    yPosition += 8;
  });
  
  return yPosition;
};

const generateDocumentCompliance = (pdf: jsPDF, data: any, yPosition: number): number => {
  pdf.setFontSize(14);
  pdf.setTextColor(0, 0, 0);
  pdf.text('Document Compliance Report', 20, yPosition);
  yPosition += 15;
  
  pdf.setFontSize(10);
  pdf.text(`Total Documents Processed: ${data.totalDocuments}`, 20, yPosition);
  yPosition += 8;
  pdf.text(`Validation Success Rate: ${data.successRate}%`, 20, yPosition);
  yPosition += 8;
  pdf.text(`Average Confidence Score: ${data.averageConfidence}%`, 20, yPosition);
  
  return yPosition;
};

const generateBGVStatus = (pdf: jsPDF, data: any, yPosition: number): number => {
  pdf.setFontSize(14);
  pdf.setTextColor(0, 0, 0);
  pdf.text('Background Verification Status Report', 20, yPosition);
  yPosition += 15;
  
  pdf.setFontSize(10);
  data.bgvStatus.forEach((status: any) => {
    pdf.text(`${status.status}: ${status.count} candidates`, 20, yPosition);
    yPosition += 8;
  });
  
  return yPosition;
};

const generateGamificationMetrics = (pdf: jsPDF, data: any, yPosition: number): number => {
  pdf.setFontSize(14);
  pdf.setTextColor(0, 0, 0);
  pdf.text('Gamification Metrics Report', 20, yPosition);
  yPosition += 15;
  
  pdf.setFontSize(10);
  pdf.text(`Average Engagement Score: ${data.averageEngagement}%`, 20, yPosition);
  yPosition += 8;
  pdf.text(`Completion Rate: ${data.completionRate}%`, 20, yPosition);
  yPosition += 8;
  pdf.text(`Top Performers: ${data.topPerformers.join(', ')}`, 20, yPosition);
  
  return yPosition;
};